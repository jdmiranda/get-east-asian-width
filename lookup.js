// Optimized code with lookup tables and binary search

// Lookup table for common characters (0-255)
const LOOKUP_TABLE = new Uint8Array([
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0-15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16-31
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 32-47 (space-/)
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 48-63 (0-?)
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64-79 (@-O)
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 80-95 (P-_)
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96-111 (`-o)
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 112-127 (p-DEL)
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 128-143
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 144-159
	0, 2, 1, 1, 2, 1, 1, 2, 2, 0, 2, 0, 1, 2, 2, 1, // 160-175
	2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, // 176-191
	0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 192-207
	2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, // 208-223
	2, 2, 0, 0, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, // 224-239
	2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, // 240-255
]);
// 0 = neutral/not special, 1 = narrow, 2 = ambiguous

// Binary search helper for ranges
function inRanges(x, ranges) {
	let left = 0;
	let right = ranges.length - 1;

	while (left <= right) {
		const mid = (left + right) >>> 1;
		const range = ranges[mid];

		if (x < range[0]) {
			right = mid - 1;
		} else if (x > range[1]) {
			left = mid + 1;
		} else {
			return true;
		}
	}

	return false;
}

// Optimized range data structures (sorted by start position)
const AMBIGUOUS_RANGES = [
	[0x300, 0x36F], [0x391, 0x3A1], [0x3A3, 0x3A9], [0x3B1, 0x3C1],
	[0x3C3, 0x3C9], [0x410, 0x44F], [0x2013, 0x2016], [0x2020, 0x2022],
	[0x2024, 0x2027], [0x2081, 0x2084], [0x215B, 0x215E], [0x2160, 0x216B],
	[0x2170, 0x2179], [0x2190, 0x2199], [0x221D, 0x2220], [0x2227, 0x222C],
	[0x2234, 0x2237], [0x2264, 0x2267], [0x2460, 0x24E9], [0x24EB, 0x254B],
	[0x2550, 0x2573], [0x2580, 0x258F], [0x2592, 0x2595], [0x25A3, 0x25A9],
	[0x25C6, 0x25C8], [0x25CE, 0x25D1], [0x25E2, 0x25E5], [0x2663, 0x2665],
	[0x2667, 0x266A], [0x26C6, 0x26CD], [0x26CF, 0x26D3], [0x26D5, 0x26E1],
	[0x26EB, 0x26F1], [0x26F6, 0x26F9], [0x2776, 0x277F], [0x2B56, 0x2B59],
	[0x3248, 0x324F], [0xE000, 0xF8FF], [0xFE00, 0xFE0F], [0x1F100, 0x1F10A],
	[0x1F110, 0x1F12D], [0x1F130, 0x1F169], [0x1F170, 0x1F18D], [0x1F19B, 0x1F1AC],
	[0xE0100, 0xE01EF], [0xF0000, 0xFFFFD], [0x100000, 0x10FFFD],
];

const AMBIGUOUS_SINGLES = [
	0xA1, 0xA4, 0xA7, 0xA8, 0xAA, 0xAD, 0xAE, 0xC6, 0xD0, 0xD7, 0xD8,
	0xE6, 0xF0, 0xFE, 0x101, 0x111, 0x113, 0x11B, 0x126, 0x127, 0x12B,
	0x138, 0x144, 0x14D, 0x152, 0x153, 0x166, 0x167, 0x16B, 0x1CE, 0x1D0,
	0x1D2, 0x1D4, 0x1D6, 0x1D8, 0x1DA, 0x1DC, 0x251, 0x261, 0x2C4, 0x2C7,
	0x2CD, 0x2D0, 0x2DD, 0x2DF, 0x401, 0x451, 0x2010, 0x2018, 0x2019,
	0x201C, 0x201D, 0x2030, 0x2032, 0x2033, 0x2035, 0x203B, 0x203E, 0x2074,
	0x207F, 0x20AC, 0x2103, 0x2105, 0x2109, 0x2113, 0x2116, 0x2121, 0x2122,
	0x2126, 0x212B, 0x2153, 0x2154, 0x2189, 0x21B8, 0x21B9, 0x21D2, 0x21D4,
	0x21E7, 0x2200, 0x2202, 0x2203, 0x2207, 0x2208, 0x220B, 0x220F, 0x2211,
	0x2215, 0x221A, 0x2223, 0x2225, 0x222E, 0x223C, 0x223D, 0x2248, 0x224C,
	0x2252, 0x2260, 0x2261, 0x226A, 0x226B, 0x226E, 0x226F, 0x2282, 0x2283,
	0x2286, 0x2287, 0x2295, 0x2299, 0x22A5, 0x22BF, 0x2312, 0x25A0, 0x25A1,
	0x25B2, 0x25B3, 0x25B6, 0x25B7, 0x25BC, 0x25BD, 0x25C0, 0x25C1, 0x25CB,
	0x25EF, 0x2605, 0x2606, 0x2609, 0x260E, 0x260F, 0x261C, 0x261E, 0x2640,
	0x2642, 0x2660, 0x2661, 0x266C, 0x266D, 0x266F, 0x269E, 0x269F, 0x26BF,
	0x26E3, 0x26E8, 0x26E9, 0x26F4, 0x26FB, 0x26FC, 0x26FE, 0x26FF, 0x273D,
	0xFFFD, 0x1F18F, 0x1F190,
];

const WIDE_RANGES = [
	[0x1100, 0x115F], [0x23E9, 0x23EC], [0x2630, 0x2637], [0x2648, 0x2653],
	[0x268A, 0x268F], [0x2753, 0x2755], [0x2795, 0x2797], [0x2E80, 0x2E99],
	[0x2E9B, 0x2EF3], [0x2F00, 0x2FD5], [0x2FF0, 0x2FFF], [0x3001, 0x303E],
	[0x3041, 0x3096], [0x3099, 0x30FF], [0x3105, 0x312F], [0x3131, 0x318E],
	[0x3190, 0x31E5], [0x31EF, 0x321E], [0x3220, 0x3247], [0x3250, 0xA48C],
	[0xA490, 0xA4C6], [0xA960, 0xA97C], [0xAC00, 0xD7A3], [0xF900, 0xFAFF],
	[0xFE10, 0xFE19], [0xFE30, 0xFE52], [0xFE54, 0xFE66], [0xFE68, 0xFE6B],
	[0x16FE0, 0x16FE4], [0x16FF0, 0x16FF6], [0x17000, 0x18CD5], [0x18CFF, 0x18D1E],
	[0x18D80, 0x18DF2], [0x1AFF0, 0x1AFF3], [0x1AFF5, 0x1AFFB], [0x1B000, 0x1B122],
	[0x1B150, 0x1B152], [0x1B164, 0x1B167], [0x1B170, 0x1B2FB], [0x1D300, 0x1D356],
	[0x1D360, 0x1D376], [0x1F191, 0x1F19A], [0x1F200, 0x1F202], [0x1F210, 0x1F23B],
	[0x1F240, 0x1F248], [0x1F260, 0x1F265], [0x1F300, 0x1F320], [0x1F32D, 0x1F335],
	[0x1F337, 0x1F37C], [0x1F37E, 0x1F393], [0x1F3A0, 0x1F3CA], [0x1F3CF, 0x1F3D3],
	[0x1F3E0, 0x1F3F0], [0x1F3F8, 0x1F43E], [0x1F442, 0x1F4FC], [0x1F4FF, 0x1F53D],
	[0x1F54B, 0x1F54E], [0x1F550, 0x1F567], [0x1F5FB, 0x1F64F], [0x1F680, 0x1F6C5],
	[0x1F6D0, 0x1F6D2], [0x1F6D5, 0x1F6D8], [0x1F6DC, 0x1F6DF], [0x1F6F4, 0x1F6FC],
	[0x1F7E0, 0x1F7EB], [0x1F90C, 0x1F93A], [0x1F93C, 0x1F945], [0x1F947, 0x1F9FF],
	[0x1FA70, 0x1FA7C], [0x1FA80, 0x1FA8A], [0x1FA8E, 0x1FAC6], [0x1FACD, 0x1FADC],
	[0x1FADF, 0x1FAEA], [0x1FAEF, 0x1FAF8], [0x20000, 0x2FFFD], [0x30000, 0x3FFFD],
];

const WIDE_SINGLES = [
	0x231A, 0x231B, 0x2329, 0x232A, 0x23F0, 0x23F3, 0x25FD, 0x25FE, 0x2614,
	0x2615, 0x267F, 0x2693, 0x26A1, 0x26AA, 0x26AB, 0x26BD, 0x26BE, 0x26C4,
	0x26C5, 0x26CE, 0x26D4, 0x26EA, 0x26F2, 0x26F3, 0x26F5, 0x26FA, 0x26FD,
	0x2705, 0x270A, 0x270B, 0x2728, 0x274C, 0x274E, 0x2757, 0x27B0, 0x27BF,
	0x2B1B, 0x2B1C, 0x2B50, 0x2B55, 0x1F004, 0x1F0CF, 0x1F18E, 0x1F250, 0x1F251,
	0x1F3F4, 0x1F440, 0x1F57A, 0x1F595, 0x1F596, 0x1F5A4, 0x1F6CC, 0x1F6EB,
	0x1F6EC, 0x1F7F0, 0x1FAC8,
];

function isAmbiguous(x) {
	// Fast path for common characters using lookup table
	if (x < 256) {
		return LOOKUP_TABLE[x] === 2;
	}

	// Check specific ranges (0xB0-0xBF, 0xDE-0xE1, etc.)
	if ((x >= 0xB0 && x <= 0xB4) || (x >= 0xB6 && x <= 0xBA) ||
		(x >= 0xBC && x <= 0xBF) || (x >= 0xDE && x <= 0xE1) ||
		(x >= 0xE8 && x <= 0xEA) || (x >= 0xF2 && x <= 0xF3) ||
		(x >= 0xF7 && x <= 0xFA) || (x >= 0x131 && x <= 0x133) ||
		(x >= 0x13F && x <= 0x142) || (x >= 0x148 && x <= 0x14B) ||
		(x >= 0x2C9 && x <= 0x2CB) || (x >= 0x2D8 && x <= 0x2DB)) {
		return true;
	}

	// Binary search for larger ranges
	if (inRanges(x, AMBIGUOUS_RANGES)) {
		return true;
	}

	// Check single characters (using binary search)
	let left = 0;
	let right = AMBIGUOUS_SINGLES.length - 1;
	while (left <= right) {
		const mid = (left + right) >>> 1;
		if (AMBIGUOUS_SINGLES[mid] === x) return true;
		if (AMBIGUOUS_SINGLES[mid] < x) {
			left = mid + 1;
		} else {
			right = mid - 1;
		}
	}

	return false;
}

function isFullWidth(x) {
	// Fast path - fullwidth characters are rare and have simple ranges
	return x === 0x3000
		|| x >= 0xFF01 && x <= 0xFF60
		|| x >= 0xFFE0 && x <= 0xFFE6;
}

function isWide(x) {
	// Binary search for ranges
	if (inRanges(x, WIDE_RANGES)) {
		return true;
	}

	// Binary search for single characters
	let left = 0;
	let right = WIDE_SINGLES.length - 1;
	while (left <= right) {
		const mid = (left + right) >>> 1;
		if (WIDE_SINGLES[mid] === x) return true;
		if (WIDE_SINGLES[mid] < x) {
			left = mid + 1;
		} else {
			right = mid - 1;
		}
	}

	return false;
}

function getCategory(x) {
	// Fast path for ASCII characters
	if (x >= 0x20 && x <= 0x7E) {
		return 'narrow';
	}

	if (isAmbiguous(x)) return 'ambiguous';

	if (isFullWidth(x)) return 'fullwidth';

	if (
		x === 0x20A9
		|| x >= 0xFF61 && x <= 0xFFBE
		|| x >= 0xFFC2 && x <= 0xFFC7
		|| x >= 0xFFCA && x <= 0xFFCF
		|| x >= 0xFFD2 && x <= 0xFFD7
		|| x >= 0xFFDA && x <= 0xFFDC
		|| x >= 0xFFE8 && x <= 0xFFEE
	) {
		return 'halfwidth';
	}

	// Additional narrow characters (ASCII already handled above)
	if (
		x === 0xA2
		|| x === 0xA3
		|| x === 0xA5
		|| x === 0xA6
		|| x === 0xAC
		|| x === 0xAF
		|| x >= 0x27E6 && x <= 0x27ED
		|| x === 0x2985
		|| x === 0x2986
	) {
		return 'narrow';
	}

	if (isWide(x)) return 'wide';

	return 'neutral';
}

export {isAmbiguous, isFullWidth, isWide, getCategory};
